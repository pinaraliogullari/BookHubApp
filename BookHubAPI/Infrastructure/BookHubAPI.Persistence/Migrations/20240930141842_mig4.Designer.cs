// <auto-generated />
using System;
using BookHubAPI.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookHubAPI.Persistence.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    [Migration("20240930141842_mig4")]
    partial class mig4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("666e1d5c-aaaa-4eb9-bdb4-19972015dbaa"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5582),
                            FirstName = "Madisen",
                            LastName = "Buckridge",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5589)
                        },
                        new
                        {
                            Id = new Guid("51956ace-b389-8319-570a-2c73e12f28c4"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5789),
                            FirstName = "Isac",
                            LastName = "Rohan",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5789)
                        },
                        new
                        {
                            Id = new Guid("39bd0599-d31d-11e7-065c-538cb686835d"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5815),
                            FirstName = "Bert",
                            LastName = "Bogan",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5816)
                        },
                        new
                        {
                            Id = new Guid("5e995dd6-3888-dabe-d2ca-f43fa50564c0"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5838),
                            FirstName = "Lyla",
                            LastName = "Bahringer",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5839)
                        },
                        new
                        {
                            Id = new Guid("2e2da942-1554-3a91-d659-d797df62dad8"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5865),
                            FirstName = "Emie",
                            LastName = "Lueilwitz",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5866)
                        },
                        new
                        {
                            Id = new Guid("1a7e937c-2ee8-9a94-8349-5c0164b7be77"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5888),
                            FirstName = "Cassie",
                            LastName = "Stark",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5889)
                        },
                        new
                        {
                            Id = new Guid("0278a11e-ae28-ea22-9a3b-4cdbf907b16e"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5932),
                            FirstName = "Frida",
                            LastName = "Rowe",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5932)
                        },
                        new
                        {
                            Id = new Guid("465dd9a4-b10c-deb7-6a52-de987a3ad941"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5964),
                            FirstName = "Alexis",
                            LastName = "Gottlieb",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5964)
                        },
                        new
                        {
                            Id = new Guid("33fd486f-34b7-a460-9984-a6869e834e31"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5984),
                            FirstName = "Jamaal",
                            LastName = "Wunsch",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(5985)
                        },
                        new
                        {
                            Id = new Guid("b569d1dc-df67-8268-fb3c-e2ab1751b62c"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(6005),
                            FirstName = "Consuelo",
                            LastName = "Kessler",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 177, DateTimeKind.Utc).AddTicks(6006)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7d8a869-2348-e9cc-9569-72288b051297"),
                            AuthorId = new Guid("666e1d5c-aaaa-4eb9-bdb4-19972015dbaa"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(3776),
                            GenreId = new Guid("4c61d5ea-daed-5cc4-d386-6a2b42e01c91"),
                            PageCount = 996,
                            PublicationDate = new DateTime(1924, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(3790),
                            Publisher = "Streich, Batz and Bogan",
                            Title = "Provident rem impedit autem.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(3785)
                        },
                        new
                        {
                            Id = new Guid("2b451a34-fcb6-deb4-23fd-1fc4bf0dc838"),
                            AuthorId = new Guid("666e1d5c-aaaa-4eb9-bdb4-19972015dbaa"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(6992),
                            GenreId = new Guid("dff2dbda-51aa-8664-4e8e-255a987724e8"),
                            PageCount = 503,
                            PublicationDate = new DateTime(1924, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(6996),
                            Publisher = "Gleason Group",
                            Title = "Quia qui provident.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(6993)
                        },
                        new
                        {
                            Id = new Guid("53d46754-8af1-ce26-da9a-8310e2f14b9d"),
                            AuthorId = new Guid("51956ace-b389-8319-570a-2c73e12f28c4"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(7465),
                            GenreId = new Guid("f2c351c9-dc7e-a19e-948a-ccb88a18a224"),
                            PageCount = 535,
                            PublicationDate = new DateTime(1924, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(7473),
                            Publisher = "Block, Greenholt and Sawayn",
                            Title = "Quam laboriosam.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(7466)
                        },
                        new
                        {
                            Id = new Guid("c318ca68-dd2e-7228-e632-fba8f5507d43"),
                            AuthorId = new Guid("39bd0599-d31d-11e7-065c-538cb686835d"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(7811),
                            GenreId = new Guid("94191b24-733d-6afa-5a61-a3a8577acb61"),
                            PageCount = 353,
                            PublicationDate = new DateTime(1924, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(7813),
                            Publisher = "Wuckert, Schuster and Rippin",
                            Title = "Sint.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(7812)
                        },
                        new
                        {
                            Id = new Guid("90259ce9-87d2-ba78-fb6a-1cb6b6199220"),
                            AuthorId = new Guid("5e995dd6-3888-dabe-d2ca-f43fa50564c0"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(8069),
                            GenreId = new Guid("85114f80-eedf-9dce-9929-9acd0a87f243"),
                            PageCount = 576,
                            PublicationDate = new DateTime(1924, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(8071),
                            Publisher = "Heaney - Gutmann",
                            Title = "Sunt deleniti.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(8070)
                        },
                        new
                        {
                            Id = new Guid("12ee6bf5-2ed9-7811-5e51-e3951472d9d6"),
                            AuthorId = new Guid("2e2da942-1554-3a91-d659-d797df62dad8"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(8349),
                            GenreId = new Guid("85114f80-eedf-9dce-9929-9acd0a87f243"),
                            PageCount = 438,
                            PublicationDate = new DateTime(1924, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(8351),
                            Publisher = "Bechtelar Group",
                            Title = "Doloribus accusantium harum unde aperiam.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(8350)
                        },
                        new
                        {
                            Id = new Guid("51925a4d-7c5b-563d-5dfa-01edc481b6e8"),
                            AuthorId = new Guid("1a7e937c-2ee8-9a94-8349-5c0164b7be77"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(8591),
                            GenreId = new Guid("f29a9785-64ca-3773-c2d8-b884eb99cb45"),
                            PageCount = 418,
                            PublicationDate = new DateTime(1924, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(8593),
                            Publisher = "Goyette, Turcotte and Morar",
                            Title = "Similique.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(8593)
                        },
                        new
                        {
                            Id = new Guid("db229a78-0914-424b-6fed-15753a8a3ae6"),
                            AuthorId = new Guid("0278a11e-ae28-ea22-9a3b-4cdbf907b16e"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(8966),
                            GenreId = new Guid("6eac7367-e35a-ef48-ce44-1cf9e831fe28"),
                            PageCount = 543,
                            PublicationDate = new DateTime(1924, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(8968),
                            Publisher = "Powlowski - Cummerata",
                            Title = "İnventore incidunt eveniet doloremque architecto.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(8967)
                        },
                        new
                        {
                            Id = new Guid("77696521-d742-21a3-ad7c-003cc4a0e4a4"),
                            AuthorId = new Guid("1a7e937c-2ee8-9a94-8349-5c0164b7be77"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(9164),
                            GenreId = new Guid("85cd9ed6-0076-f2ab-73ad-545777b1c9bb"),
                            PageCount = 250,
                            PublicationDate = new DateTime(1924, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(9165),
                            Publisher = "DuBuque - Reilly",
                            Title = "Numquam soluta nesciunt nesciunt beatae.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(9165)
                        },
                        new
                        {
                            Id = new Guid("a1e561da-aadb-6e41-c890-89c9d67ab76c"),
                            AuthorId = new Guid("465dd9a4-b10c-deb7-6a52-de987a3ad941"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(9440),
                            GenreId = new Guid("dff2dbda-51aa-8664-4e8e-255a987724e8"),
                            PageCount = 352,
                            PublicationDate = new DateTime(1924, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(9441),
                            Publisher = "Moen - Adams",
                            Title = "Rerum fugiat tenetur a qui.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 185, DateTimeKind.Utc).AddTicks(9441)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasDiscriminator().HasValue("File");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dff2dbda-51aa-8664-4e8e-255a987724e8"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4754),
                            Name = "Poetry ",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4757)
                        },
                        new
                        {
                            Id = new Guid("85cd9ed6-0076-f2ab-73ad-545777b1c9bb"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4762),
                            Name = "Fantasy",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4763)
                        },
                        new
                        {
                            Id = new Guid("4c61d5ea-daed-5cc4-d386-6a2b42e01c91"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4765),
                            Name = "Fiction",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4765)
                        },
                        new
                        {
                            Id = new Guid("6eac7367-e35a-ef48-ce44-1cf9e831fe28"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4766),
                            Name = "Biography",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4767)
                        },
                        new
                        {
                            Id = new Guid("f29a9785-64ca-3773-c2d8-b884eb99cb45"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4768),
                            Name = "History",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4769)
                        },
                        new
                        {
                            Id = new Guid("46a9821b-3dee-f394-b52d-e3936c3915e1"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4771),
                            Name = "Romance",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4771)
                        },
                        new
                        {
                            Id = new Guid("d43c4a6a-2c38-8336-3b17-8e257ecfe3ed"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4772),
                            Name = "Psychology ",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4773)
                        },
                        new
                        {
                            Id = new Guid("f2c351c9-dc7e-a19e-948a-ccb88a18a224"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4774),
                            Name = "Fairytale ",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4775)
                        },
                        new
                        {
                            Id = new Guid("94191b24-733d-6afa-5a61-a3a8577acb61"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4776),
                            Name = "Self-Help ",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4776)
                        },
                        new
                        {
                            Id = new Guid("85114f80-eedf-9dce-9929-9acd0a87f243"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4778),
                            Name = "Science ",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 186, DateTimeKind.Utc).AddTicks(4779)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Quotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Quotations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fe05217-4bcc-b27a-d74a-7ffc3fa8bda4"),
                            BookId = new Guid("a7d8a869-2348-e9cc-9569-72288b051297"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 192, DateTimeKind.Utc).AddTicks(7579),
                            Description = "İd sed officiis natus aut hic rem rerum pariatur blanditiis distinctio dolor aut sit ut quidem.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 192, DateTimeKind.Utc).AddTicks(7585)
                        },
                        new
                        {
                            Id = new Guid("a8d817a4-88ed-85dc-d5f6-e48532c9c5e1"),
                            BookId = new Guid("2b451a34-fcb6-deb4-23fd-1fc4bf0dc838"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 192, DateTimeKind.Utc).AddTicks(8735),
                            Description = "Quisquam quibusdam et voluptas id quis ipsa doloremque corporis repudiandae tempora cum accusantium et ipsam voluptatem consequatur.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 192, DateTimeKind.Utc).AddTicks(8742)
                        },
                        new
                        {
                            Id = new Guid("f30b692f-34fb-2007-7977-1d7be62bd962"),
                            BookId = new Guid("53d46754-8af1-ce26-da9a-8310e2f14b9d"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(772),
                            Description = "Voluptas magni ut aut deserunt velit.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(776)
                        },
                        new
                        {
                            Id = new Guid("2f5d4de3-c391-b1a4-1260-b6bfdc712040"),
                            BookId = new Guid("c318ca68-dd2e-7228-e632-fba8f5507d43"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(934),
                            Description = "Error autem eligendi tempore nisi nihil sed et voluptatem harum sit et sunt optio laudantium error officiis quia natus qui consectetur ut facilis.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(934)
                        },
                        new
                        {
                            Id = new Guid("f30b692f-34fb-2007-7977-1d7be62bd965"),
                            BookId = new Guid("90259ce9-87d2-ba78-fb6a-1cb6b6199220"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(1440),
                            Description = "Eligendi et cumque quo inventore aut in consequuntur iure repellat commodi minus quas sit delectus.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(1440)
                        },
                        new
                        {
                            Id = new Guid("2f5d4de3-c391-b1a4-1260-b6bfdc712044"),
                            BookId = new Guid("12ee6bf5-2ed9-7811-5e51-e3951472d9d6"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(1671),
                            Description = "Voluptatem ut tempora dolores libero fuga quia eius tempore ut minus ipsam ut molestiae dignissimos quae cum laborum doloremque quidem vitae ducimus et.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(1672)
                        },
                        new
                        {
                            Id = new Guid("3cb7987a-567a-311c-e03b-d9c7b35552d1"),
                            BookId = new Guid("51925a4d-7c5b-563d-5dfa-01edc481b6e8"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(4712),
                            Description = "Necessitatibus ab totam reprehenderit ipsa magnam qui error sint sunt sunt consequatur repellendus eum deserunt numquam recusandae fugit et quasi pariatur quisquam aperiam consequuntur.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(4720)
                        },
                        new
                        {
                            Id = new Guid("cd9eedb3-b38e-a511-0578-9f68937e663c"),
                            BookId = new Guid("c318ca68-dd2e-7228-e632-fba8f5507d43"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(4935),
                            Description = "Et ipsam quo aut ratione atque facere sunt enim quaerat sequi sunt corporis quo et eos molestiae et sit autem illum sunt alias et voluptatum.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(4935)
                        },
                        new
                        {
                            Id = new Guid("1a2853ad-cd61-6504-94d9-b7833c6ecf7c"),
                            BookId = new Guid("a7d8a869-2348-e9cc-9569-72288b051297"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(5104),
                            Description = "Consectetur maiores ut vero eveniet et sapiente nisi dolorem non quidem mollitia officia voluptatem porro aliquam est modi dolorum omnis asperiores sunt.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 193, DateTimeKind.Utc).AddTicks(5105)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60f6c9e4-14cf-42b9-7708-1b7d0974ba26"),
                            BookId = new Guid("a7d8a869-2348-e9cc-9569-72288b051297"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 202, DateTimeKind.Utc).AddTicks(7726),
                            Description = "Veritatis itaque suscipit pariatur aut expedita in autem animi necessitatibus voluptas et maxime sed ducimus non est aut.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 202, DateTimeKind.Utc).AddTicks(7734)
                        },
                        new
                        {
                            Id = new Guid("be36e34d-fbb8-9b46-e9ad-b4a820e55016"),
                            BookId = new Guid("2b451a34-fcb6-deb4-23fd-1fc4bf0dc838"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 202, DateTimeKind.Utc).AddTicks(8430),
                            Description = "Temporibus molestias qui aliquam adipisci cumque eveniet dolores aut ullam debitis voluptas et earum aliquid neque consequatur cum omnis culpa sit aliquam reiciendis nam pariatur.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 202, DateTimeKind.Utc).AddTicks(8430)
                        },
                        new
                        {
                            Id = new Guid("1afc5be6-b111-fab7-0cc9-757d3154adb3"),
                            BookId = new Guid("2b451a34-fcb6-deb4-23fd-1fc4bf0dc838"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 202, DateTimeKind.Utc).AddTicks(8608),
                            Description = "Non consequuntur voluptas voluptas deleniti doloribus vero illo unde itaque atque aperiam cum esse.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 202, DateTimeKind.Utc).AddTicks(8609)
                        },
                        new
                        {
                            Id = new Guid("e8d2a2da-cd9e-f299-202c-b6ed9e1f94d7"),
                            BookId = new Guid("53d46754-8af1-ce26-da9a-8310e2f14b9d"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 202, DateTimeKind.Utc).AddTicks(8715),
                            Description = "Vel maiores aspernatur aut exercitationem fugit voluptatum beatae omnis iure soluta repudiandae architecto sed voluptatem eius ut et voluptas dolore in et enim explicabo ut est et vel deleniti qui possimus facilis quod harum perspiciatis.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 202, DateTimeKind.Utc).AddTicks(8716)
                        },
                        new
                        {
                            Id = new Guid("edc531de-3491-3ee9-7992-4be730ead84e"),
                            BookId = new Guid("c318ca68-dd2e-7228-e632-fba8f5507d43"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 202, DateTimeKind.Utc).AddTicks(9223),
                            Description = "Esse et deleniti aut praesentium deleniti aut quas excepturi officiis et delectus qui nihil autem.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 202, DateTimeKind.Utc).AddTicks(9224)
                        },
                        new
                        {
                            Id = new Guid("d4e14be6-da76-444a-9c51-4cad6ca4a466"),
                            BookId = new Guid("90259ce9-87d2-ba78-fb6a-1cb6b6199220"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 202, DateTimeKind.Utc).AddTicks(9335),
                            Description = "Voluptatibus aut aspernatur accusamus et qui dicta maxime ullam quia non suscipit occaecati autem sit excepturi rerum illum magnam repellendus voluptate voluptates qui iusto non rerum unde vel nostrum porro.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 202, DateTimeKind.Utc).AddTicks(9336)
                        },
                        new
                        {
                            Id = new Guid("0665cd7b-17f4-9387-e3ec-0a9f7ec0c15b"),
                            BookId = new Guid("90259ce9-87d2-ba78-fb6a-1cb6b6199220"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 204, DateTimeKind.Utc).AddTicks(2647),
                            Description = "Quia id pariatur magnam amet et doloremque est quae.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 204, DateTimeKind.Utc).AddTicks(2653)
                        },
                        new
                        {
                            Id = new Guid("274772b7-a644-4c41-7d38-0569ac273e65"),
                            BookId = new Guid("12ee6bf5-2ed9-7811-5e51-e3951472d9d6"),
                            CreatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 204, DateTimeKind.Utc).AddTicks(2936),
                            Description = "Eius amet omnis et et nobis earum facilis quia laboriosam maxime possimus eos earum eum ut voluptatibus commodi porro dolores non alias nam qui dolor in nihil aut et tenetur.",
                            UpdatedDate = new DateTime(2024, 9, 30, 14, 18, 40, 204, DateTimeKind.Utc).AddTicks(2937)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.AuthorImageFile", b =>
                {
                    b.HasBaseType("BookHubAPI.Domain.Entities.File");

                    b.HasDiscriminator().HasValue("AuthorImageFile");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.BookFile", b =>
                {
                    b.HasBaseType("BookHubAPI.Domain.Entities.File");

                    b.Property<int>("PublishmentCount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("BookFile");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Book", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookHubAPI.Domain.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Quotation", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Book", "Book")
                        .WithMany("Quotation")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Review", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Book", b =>
                {
                    b.Navigation("Quotation");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
