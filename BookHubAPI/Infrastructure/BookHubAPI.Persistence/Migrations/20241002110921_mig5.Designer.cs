// <auto-generated />
using System;
using BookHubAPI.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookHubAPI.Persistence.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    [Migration("20241002110921_mig5")]
    partial class mig5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorAuthorImageFile", b =>
                {
                    b.Property<Guid>("AuthorImageFilesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uuid");

                    b.HasKey("AuthorImageFilesId", "AuthorsId");

                    b.HasIndex("AuthorsId");

                    b.ToTable("AuthorAuthorImageFile");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("666e1d5c-aaaa-4eb9-bdb4-19972015dbaa"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3716),
                            FirstName = "Donato",
                            LastName = "Fisher",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3719)
                        },
                        new
                        {
                            Id = new Guid("51956ace-b389-8319-570a-2c73e12f28c4"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3839),
                            FirstName = "Glenna",
                            LastName = "O'Hara",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3839)
                        },
                        new
                        {
                            Id = new Guid("39bd0599-d31d-11e7-065c-538cb686835d"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3857),
                            FirstName = "Alexandria",
                            LastName = "Emard",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3857)
                        },
                        new
                        {
                            Id = new Guid("5e995dd6-3888-dabe-d2ca-f43fa50564c0"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3872),
                            FirstName = "Taurean",
                            LastName = "Gerhold",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3873)
                        },
                        new
                        {
                            Id = new Guid("2e2da942-1554-3a91-d659-d797df62dad8"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3883),
                            FirstName = "Roxane",
                            LastName = "Lehner",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3884)
                        },
                        new
                        {
                            Id = new Guid("1a7e937c-2ee8-9a94-8349-5c0164b7be77"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3897),
                            FirstName = "Shanna",
                            LastName = "Schiller",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3897)
                        },
                        new
                        {
                            Id = new Guid("0278a11e-ae28-ea22-9a3b-4cdbf907b16e"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3910),
                            FirstName = "Jacklyn",
                            LastName = "Johnson",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3911)
                        },
                        new
                        {
                            Id = new Guid("465dd9a4-b10c-deb7-6a52-de987a3ad941"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3920),
                            FirstName = "Dudley",
                            LastName = "Murray",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3921)
                        },
                        new
                        {
                            Id = new Guid("33fd486f-34b7-a460-9984-a6869e834e31"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3931),
                            FirstName = "Hermann",
                            LastName = "Brown",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3931)
                        },
                        new
                        {
                            Id = new Guid("b569d1dc-df67-8268-fb3c-e2ab1751b62c"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3944),
                            FirstName = "Nathen",
                            LastName = "O'Conner",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 792, DateTimeKind.Utc).AddTicks(3944)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7d8a869-2348-e9cc-9569-72288b051297"),
                            AuthorId = new Guid("666e1d5c-aaaa-4eb9-bdb4-19972015dbaa"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(4599),
                            GenreId = new Guid("4c61d5ea-daed-5cc4-d386-6a2b42e01c91"),
                            PageCount = 633,
                            PublicationDate = new DateTime(1924, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(4602),
                            Publisher = "Daugherty - Altenwerth",
                            Title = "Labore commodi.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(4601)
                        },
                        new
                        {
                            Id = new Guid("2b451a34-fcb6-deb4-23fd-1fc4bf0dc838"),
                            AuthorId = new Guid("666e1d5c-aaaa-4eb9-bdb4-19972015dbaa"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5281),
                            GenreId = new Guid("dff2dbda-51aa-8664-4e8e-255a987724e8"),
                            PageCount = 322,
                            PublicationDate = new DateTime(1924, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5282),
                            Publisher = "Turner - Effertz",
                            Title = "Eveniet aut consequatur.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5281)
                        },
                        new
                        {
                            Id = new Guid("53d46754-8af1-ce26-da9a-8310e2f14b9d"),
                            AuthorId = new Guid("51956ace-b389-8319-570a-2c73e12f28c4"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5450),
                            GenreId = new Guid("f2c351c9-dc7e-a19e-948a-ccb88a18a224"),
                            PageCount = 306,
                            PublicationDate = new DateTime(1924, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5451),
                            Publisher = "Sporer, Dickens and Armstrong",
                            Title = "Autem.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5451)
                        },
                        new
                        {
                            Id = new Guid("c318ca68-dd2e-7228-e632-fba8f5507d43"),
                            AuthorId = new Guid("39bd0599-d31d-11e7-065c-538cb686835d"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5585),
                            GenreId = new Guid("94191b24-733d-6afa-5a61-a3a8577acb61"),
                            PageCount = 496,
                            PublicationDate = new DateTime(1924, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5586),
                            Publisher = "Marvin - Price",
                            Title = "Molestiae.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5586)
                        },
                        new
                        {
                            Id = new Guid("90259ce9-87d2-ba78-fb6a-1cb6b6199220"),
                            AuthorId = new Guid("5e995dd6-3888-dabe-d2ca-f43fa50564c0"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5707),
                            GenreId = new Guid("85114f80-eedf-9dce-9929-9acd0a87f243"),
                            PageCount = 388,
                            PublicationDate = new DateTime(1924, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5708),
                            Publisher = "Beahan - Harvey",
                            Title = "Debitis sit consequatur.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5707)
                        },
                        new
                        {
                            Id = new Guid("12ee6bf5-2ed9-7811-5e51-e3951472d9d6"),
                            AuthorId = new Guid("2e2da942-1554-3a91-d659-d797df62dad8"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5825),
                            GenreId = new Guid("85114f80-eedf-9dce-9929-9acd0a87f243"),
                            PageCount = 467,
                            PublicationDate = new DateTime(1924, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5826),
                            Publisher = "Sawayn, Quitzon and Schimmel",
                            Title = "Velit ad.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5825)
                        },
                        new
                        {
                            Id = new Guid("51925a4d-7c5b-563d-5dfa-01edc481b6e8"),
                            AuthorId = new Guid("1a7e937c-2ee8-9a94-8349-5c0164b7be77"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5953),
                            GenreId = new Guid("f29a9785-64ca-3773-c2d8-b884eb99cb45"),
                            PageCount = 343,
                            PublicationDate = new DateTime(1924, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5953),
                            Publisher = "Rogahn, Medhurst and Mante",
                            Title = "Repudiandae.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(5953)
                        },
                        new
                        {
                            Id = new Guid("db229a78-0914-424b-6fed-15753a8a3ae6"),
                            AuthorId = new Guid("0278a11e-ae28-ea22-9a3b-4cdbf907b16e"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(6101),
                            GenreId = new Guid("6eac7367-e35a-ef48-ce44-1cf9e831fe28"),
                            PageCount = 220,
                            PublicationDate = new DateTime(1924, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(6102),
                            Publisher = "Block Group",
                            Title = "Magni.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 795, DateTimeKind.Utc).AddTicks(6102)
                        },
                        new
                        {
                            Id = new Guid("77696521-d742-21a3-ad7c-003cc4a0e4a4"),
                            AuthorId = new Guid("1a7e937c-2ee8-9a94-8349-5c0164b7be77"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(611),
                            GenreId = new Guid("85cd9ed6-0076-f2ab-73ad-545777b1c9bb"),
                            PageCount = 171,
                            PublicationDate = new DateTime(1924, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(613),
                            Publisher = "VonRueden Group",
                            Title = "Facilis unde.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(612)
                        },
                        new
                        {
                            Id = new Guid("a1e561da-aadb-6e41-c890-89c9d67ab76c"),
                            AuthorId = new Guid("465dd9a4-b10c-deb7-6a52-de987a3ad941"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(1975),
                            GenreId = new Guid("dff2dbda-51aa-8664-4e8e-255a987724e8"),
                            PageCount = 275,
                            PublicationDate = new DateTime(1924, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(1977),
                            Publisher = "Osinski, Wiegand and Grant",
                            Title = "Odio ut architecto cumque.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(1977)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasDiscriminator().HasValue("File");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dff2dbda-51aa-8664-4e8e-255a987724e8"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4939),
                            Name = "Poetry ",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4940)
                        },
                        new
                        {
                            Id = new Guid("85cd9ed6-0076-f2ab-73ad-545777b1c9bb"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4943),
                            Name = "Fantasy",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4943)
                        },
                        new
                        {
                            Id = new Guid("4c61d5ea-daed-5cc4-d386-6a2b42e01c91"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4946),
                            Name = "Fiction",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4946)
                        },
                        new
                        {
                            Id = new Guid("6eac7367-e35a-ef48-ce44-1cf9e831fe28"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4948),
                            Name = "Biography",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4948)
                        },
                        new
                        {
                            Id = new Guid("f29a9785-64ca-3773-c2d8-b884eb99cb45"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4949),
                            Name = "History",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4950)
                        },
                        new
                        {
                            Id = new Guid("46a9821b-3dee-f394-b52d-e3936c3915e1"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4952),
                            Name = "Romance",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4952)
                        },
                        new
                        {
                            Id = new Guid("d43c4a6a-2c38-8336-3b17-8e257ecfe3ed"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4953),
                            Name = "Psychology ",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4954)
                        },
                        new
                        {
                            Id = new Guid("f2c351c9-dc7e-a19e-948a-ccb88a18a224"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4955),
                            Name = "Fairytale ",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4955)
                        },
                        new
                        {
                            Id = new Guid("94191b24-733d-6afa-5a61-a3a8577acb61"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4957),
                            Name = "Self-Help ",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4957)
                        },
                        new
                        {
                            Id = new Guid("85114f80-eedf-9dce-9929-9acd0a87f243"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4958),
                            Name = "Science ",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 796, DateTimeKind.Utc).AddTicks(4959)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Quotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Quotations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fe05217-4bcc-b27a-d74a-7ffc3fa8bda4"),
                            BookId = new Guid("a7d8a869-2348-e9cc-9569-72288b051297"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(985),
                            Description = "Nostrum alias voluptas dolor qui quia dicta libero numquam sunt ut assumenda nesciunt quasi omnis magni quasi voluptas facere et et eos in.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(989)
                        },
                        new
                        {
                            Id = new Guid("a8d817a4-88ed-85dc-d5f6-e48532c9c5e1"),
                            BookId = new Guid("2b451a34-fcb6-deb4-23fd-1fc4bf0dc838"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1228),
                            Description = "Eligendi quia tenetur molestias odit debitis et harum tenetur dolorem quisquam tempore qui voluptatum.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1228)
                        },
                        new
                        {
                            Id = new Guid("f30b692f-34fb-2007-7977-1d7be62bd962"),
                            BookId = new Guid("53d46754-8af1-ce26-da9a-8310e2f14b9d"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1291),
                            Description = "Et earum eos facilis omnis et similique dolor voluptatem sit et ut et illo cupiditate veritatis nam nemo voluptatem voluptatem nisi possimus voluptatum.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1291)
                        },
                        new
                        {
                            Id = new Guid("2f5d4de3-c391-b1a4-1260-b6bfdc712040"),
                            BookId = new Guid("c318ca68-dd2e-7228-e632-fba8f5507d43"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1398),
                            Description = "Provident enim quo provident id nesciunt libero vero officia beatae qui vero suscipit dolorum et molestiae sint consequatur est ut rerum iste ratione sit eaque.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1399)
                        },
                        new
                        {
                            Id = new Guid("f30b692f-34fb-2007-7977-1d7be62bd965"),
                            BookId = new Guid("90259ce9-87d2-ba78-fb6a-1cb6b6199220"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1492),
                            Description = "A nemo veritatis unde quaerat et sed sed modi ipsam illum cupiditate necessitatibus asperiores in totam ratione ea culpa ex.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1492)
                        },
                        new
                        {
                            Id = new Guid("2f5d4de3-c391-b1a4-1260-b6bfdc712044"),
                            BookId = new Guid("12ee6bf5-2ed9-7811-5e51-e3951472d9d6"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1558),
                            Description = "Cumque ea aut molestiae sed vitae.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1558)
                        },
                        new
                        {
                            Id = new Guid("3cb7987a-567a-311c-e03b-d9c7b35552d1"),
                            BookId = new Guid("51925a4d-7c5b-563d-5dfa-01edc481b6e8"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1588),
                            Description = "Aliquid vero laudantium corporis veritatis similique voluptas autem id fugit magni natus quibusdam impedit quisquam vel ut excepturi accusantium enim aut maiores.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1589)
                        },
                        new
                        {
                            Id = new Guid("cd9eedb3-b38e-a511-0578-9f68937e663c"),
                            BookId = new Guid("c318ca68-dd2e-7228-e632-fba8f5507d43"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1688),
                            Description = "Aut quis doloremque doloribus ullam aut consectetur eum nesciunt.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1689)
                        },
                        new
                        {
                            Id = new Guid("1a2853ad-cd61-6504-94d9-b7833c6ecf7c"),
                            BookId = new Guid("a7d8a869-2348-e9cc-9569-72288b051297"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1728),
                            Description = "İpsum illum velit eaque qui est necessitatibus blanditiis cum earum non illum ducimus earum quo voluptatem deserunt omnis recusandae nihil doloremque necessitatibus vero.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 799, DateTimeKind.Utc).AddTicks(1728)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60f6c9e4-14cf-42b9-7708-1b7d0974ba26"),
                            BookId = new Guid("a7d8a869-2348-e9cc-9569-72288b051297"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(379),
                            Description = "Ducimus dolor recusandae consequatur itaque similique autem delectus quia sint velit debitis tempora dolores quia eligendi dolorem est dolorem delectus magnam nihil.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(382)
                        },
                        new
                        {
                            Id = new Guid("be36e34d-fbb8-9b46-e9ad-b4a820e55016"),
                            BookId = new Guid("2b451a34-fcb6-deb4-23fd-1fc4bf0dc838"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(631),
                            Description = "Qui eum aut velit sint quidem illo maiores tempora dolore esse porro quia velit iste quo quis.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(631)
                        },
                        new
                        {
                            Id = new Guid("1afc5be6-b111-fab7-0cc9-757d3154adb3"),
                            BookId = new Guid("2b451a34-fcb6-deb4-23fd-1fc4bf0dc838"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(698),
                            Description = "Omnis sed architecto asperiores voluptas voluptas suscipit error.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(698)
                        },
                        new
                        {
                            Id = new Guid("e8d2a2da-cd9e-f299-202c-b6ed9e1f94d7"),
                            BookId = new Guid("53d46754-8af1-ce26-da9a-8310e2f14b9d"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(730),
                            Description = "Voluptates beatae sed voluptatem dolorum omnis magni in consectetur est delectus qui ipsum in suscipit corporis in delectus debitis dolor et repellendus cupiditate voluptate earum qui autem excepturi quo iste laboriosam.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(731)
                        },
                        new
                        {
                            Id = new Guid("edc531de-3491-3ee9-7992-4be730ead84e"),
                            BookId = new Guid("c318ca68-dd2e-7228-e632-fba8f5507d43"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(846),
                            Description = "Nostrum illo nemo rem non ut et sed qui perspiciatis sit sint.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(847)
                        },
                        new
                        {
                            Id = new Guid("d4e14be6-da76-444a-9c51-4cad6ca4a466"),
                            BookId = new Guid("90259ce9-87d2-ba78-fb6a-1cb6b6199220"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(889),
                            Description = "Totam harum nam occaecati suscipit doloribus et voluptatum error consectetur facilis cumque voluptas distinctio quia ipsam et voluptate voluptatum et magnam.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(890)
                        },
                        new
                        {
                            Id = new Guid("0665cd7b-17f4-9387-e3ec-0a9f7ec0c15b"),
                            BookId = new Guid("90259ce9-87d2-ba78-fb6a-1cb6b6199220"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(952),
                            Description = "Distinctio assumenda rerum dolorem cum ducimus blanditiis molestiae qui maxime eum pariatur doloribus vero optio et aspernatur consequatur et iste voluptate veritatis corrupti amet.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(952)
                        },
                        new
                        {
                            Id = new Guid("274772b7-a644-4c41-7d38-0569ac273e65"),
                            BookId = new Guid("12ee6bf5-2ed9-7811-5e51-e3951472d9d6"),
                            CreatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(1023),
                            Description = "Fugit ad omnis voluptatum mollitia consequuntur velit et dolor omnis quis nisi quod.",
                            UpdatedDate = new DateTime(2024, 10, 2, 11, 9, 19, 802, DateTimeKind.Utc).AddTicks(1023)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.AuthorImageFile", b =>
                {
                    b.HasBaseType("BookHubAPI.Domain.Entities.File");

                    b.HasDiscriminator().HasValue("AuthorImageFile");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.BookFile", b =>
                {
                    b.HasBaseType("BookHubAPI.Domain.Entities.File");

                    b.Property<int>("PublishmentCount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("BookFile");
                });

            modelBuilder.Entity("AuthorAuthorImageFile", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.AuthorImageFile", null)
                        .WithMany()
                        .HasForeignKey("AuthorImageFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookHubAPI.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Book", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookHubAPI.Domain.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Quotation", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Book", "Book")
                        .WithMany("Quotation")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Review", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Book", b =>
                {
                    b.Navigation("Quotation");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
