// <auto-generated />
using System;
using BookHubAPI.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookHubAPI.Persistence.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    [Migration("20241007095123_mig6")]
    partial class mig6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorAuthorImageFile", b =>
                {
                    b.Property<Guid>("AuthorImageFilesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uuid");

                    b.HasKey("AuthorImageFilesId", "AuthorsId");

                    b.HasIndex("AuthorsId");

                    b.ToTable("AuthorAuthorImageFile");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("666e1d5c-aaaa-4eb9-bdb4-19972015dbaa"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9848),
                            FirstName = "Garett",
                            LastName = "Blick",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9852)
                        },
                        new
                        {
                            Id = new Guid("51956ace-b389-8319-570a-2c73e12f28c4"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9942),
                            FirstName = "Freeda",
                            LastName = "Schultz",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9942)
                        },
                        new
                        {
                            Id = new Guid("39bd0599-d31d-11e7-065c-538cb686835d"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9954),
                            FirstName = "Junius",
                            LastName = "Morissette",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9954)
                        },
                        new
                        {
                            Id = new Guid("5e995dd6-3888-dabe-d2ca-f43fa50564c0"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9965),
                            FirstName = "Cheyanne",
                            LastName = "Mayer",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9965)
                        },
                        new
                        {
                            Id = new Guid("2e2da942-1554-3a91-d659-d797df62dad8"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9977),
                            FirstName = "Sherman",
                            LastName = "Strosin",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9977)
                        },
                        new
                        {
                            Id = new Guid("1a7e937c-2ee8-9a94-8349-5c0164b7be77"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9988),
                            FirstName = "Cory",
                            LastName = "Leannon",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9989)
                        },
                        new
                        {
                            Id = new Guid("0278a11e-ae28-ea22-9a3b-4cdbf907b16e"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9999),
                            FirstName = "Gisselle",
                            LastName = "Welch",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 673, DateTimeKind.Utc).AddTicks(9999)
                        },
                        new
                        {
                            Id = new Guid("465dd9a4-b10c-deb7-6a52-de987a3ad941"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 674, DateTimeKind.Utc).AddTicks(10),
                            FirstName = "Alia",
                            LastName = "Kautzer",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 674, DateTimeKind.Utc).AddTicks(11)
                        },
                        new
                        {
                            Id = new Guid("33fd486f-34b7-a460-9984-a6869e834e31"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 674, DateTimeKind.Utc).AddTicks(23),
                            FirstName = "General",
                            LastName = "Erdman",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 674, DateTimeKind.Utc).AddTicks(23)
                        },
                        new
                        {
                            Id = new Guid("b569d1dc-df67-8268-fb3c-e2ab1751b62c"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 674, DateTimeKind.Utc).AddTicks(36),
                            FirstName = "Buck",
                            LastName = "Dickinson",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 674, DateTimeKind.Utc).AddTicks(36)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7d8a869-2348-e9cc-9569-72288b051297"),
                            AuthorId = new Guid("666e1d5c-aaaa-4eb9-bdb4-19972015dbaa"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(7951),
                            GenreId = new Guid("4c61d5ea-daed-5cc4-d386-6a2b42e01c91"),
                            PageCount = 187,
                            PublicationDate = new DateTime(1924, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(7956),
                            Publisher = "Schumm - Heaney",
                            Title = "Debitis dolore exercitationem.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(7954)
                        },
                        new
                        {
                            Id = new Guid("2b451a34-fcb6-deb4-23fd-1fc4bf0dc838"),
                            AuthorId = new Guid("666e1d5c-aaaa-4eb9-bdb4-19972015dbaa"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9030),
                            GenreId = new Guid("dff2dbda-51aa-8664-4e8e-255a987724e8"),
                            PageCount = 325,
                            PublicationDate = new DateTime(1924, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9031),
                            Publisher = "Corkery, Schaefer and Howell",
                            Title = "Repellendus placeat et et.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9030)
                        },
                        new
                        {
                            Id = new Guid("53d46754-8af1-ce26-da9a-8310e2f14b9d"),
                            AuthorId = new Guid("51956ace-b389-8319-570a-2c73e12f28c4"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9244),
                            GenreId = new Guid("f2c351c9-dc7e-a19e-948a-ccb88a18a224"),
                            PageCount = 408,
                            PublicationDate = new DateTime(1924, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9245),
                            Publisher = "Ortiz, King and Daugherty",
                            Title = "Neque error eveniet nam.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9244)
                        },
                        new
                        {
                            Id = new Guid("c318ca68-dd2e-7228-e632-fba8f5507d43"),
                            AuthorId = new Guid("39bd0599-d31d-11e7-065c-538cb686835d"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9602),
                            GenreId = new Guid("94191b24-733d-6afa-5a61-a3a8577acb61"),
                            PageCount = 773,
                            PublicationDate = new DateTime(1924, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9603),
                            Publisher = "Grimes LLC",
                            Title = "Dicta consequatur quam assumenda.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9602)
                        },
                        new
                        {
                            Id = new Guid("90259ce9-87d2-ba78-fb6a-1cb6b6199220"),
                            AuthorId = new Guid("5e995dd6-3888-dabe-d2ca-f43fa50564c0"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9780),
                            GenreId = new Guid("85114f80-eedf-9dce-9929-9acd0a87f243"),
                            PageCount = 591,
                            PublicationDate = new DateTime(1924, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9781),
                            Publisher = "Stokes - Steuber",
                            Title = "İnventore dolor reprehenderit quia maiores.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9780)
                        },
                        new
                        {
                            Id = new Guid("12ee6bf5-2ed9-7811-5e51-e3951472d9d6"),
                            AuthorId = new Guid("2e2da942-1554-3a91-d659-d797df62dad8"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9935),
                            GenreId = new Guid("85114f80-eedf-9dce-9929-9acd0a87f243"),
                            PageCount = 793,
                            PublicationDate = new DateTime(1924, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9936),
                            Publisher = "Jerde Inc",
                            Title = "Corrupti aliquid.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 677, DateTimeKind.Utc).AddTicks(9935)
                        },
                        new
                        {
                            Id = new Guid("51925a4d-7c5b-563d-5dfa-01edc481b6e8"),
                            AuthorId = new Guid("1a7e937c-2ee8-9a94-8349-5c0164b7be77"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(70),
                            GenreId = new Guid("f29a9785-64ca-3773-c2d8-b884eb99cb45"),
                            PageCount = 428,
                            PublicationDate = new DateTime(1924, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(71),
                            Publisher = "Gerhold - Kirlin",
                            Title = "Dolor voluptatem.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(71)
                        },
                        new
                        {
                            Id = new Guid("db229a78-0914-424b-6fed-15753a8a3ae6"),
                            AuthorId = new Guid("0278a11e-ae28-ea22-9a3b-4cdbf907b16e"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(180),
                            GenreId = new Guid("6eac7367-e35a-ef48-ce44-1cf9e831fe28"),
                            PageCount = 140,
                            PublicationDate = new DateTime(1924, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(181),
                            Publisher = "Bauch, Prosacco and Rodriguez",
                            Title = "Enim est at omnis.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(181)
                        },
                        new
                        {
                            Id = new Guid("77696521-d742-21a3-ad7c-003cc4a0e4a4"),
                            AuthorId = new Guid("1a7e937c-2ee8-9a94-8349-5c0164b7be77"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(358),
                            GenreId = new Guid("85cd9ed6-0076-f2ab-73ad-545777b1c9bb"),
                            PageCount = 478,
                            PublicationDate = new DateTime(1924, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(359),
                            Publisher = "Hickle, Bauch and Tillman",
                            Title = "Corporis saepe.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(358)
                        },
                        new
                        {
                            Id = new Guid("a1e561da-aadb-6e41-c890-89c9d67ab76c"),
                            AuthorId = new Guid("465dd9a4-b10c-deb7-6a52-de987a3ad941"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(568),
                            GenreId = new Guid("dff2dbda-51aa-8664-4e8e-255a987724e8"),
                            PageCount = 711,
                            PublicationDate = new DateTime(1924, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(569),
                            Publisher = "Boehm Inc",
                            Title = "Quod fuga architecto sit quia.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(569)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasDiscriminator().HasValue("File");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dff2dbda-51aa-8664-4e8e-255a987724e8"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4381),
                            Name = "Poetry ",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4386)
                        },
                        new
                        {
                            Id = new Guid("85cd9ed6-0076-f2ab-73ad-545777b1c9bb"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4389),
                            Name = "Fantasy",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4389)
                        },
                        new
                        {
                            Id = new Guid("4c61d5ea-daed-5cc4-d386-6a2b42e01c91"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4392),
                            Name = "Fiction",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4392)
                        },
                        new
                        {
                            Id = new Guid("6eac7367-e35a-ef48-ce44-1cf9e831fe28"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4395),
                            Name = "Biography",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4395)
                        },
                        new
                        {
                            Id = new Guid("f29a9785-64ca-3773-c2d8-b884eb99cb45"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4396),
                            Name = "History",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4397)
                        },
                        new
                        {
                            Id = new Guid("46a9821b-3dee-f394-b52d-e3936c3915e1"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4398),
                            Name = "Romance",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4399)
                        },
                        new
                        {
                            Id = new Guid("d43c4a6a-2c38-8336-3b17-8e257ecfe3ed"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4400),
                            Name = "Psychology ",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4401)
                        },
                        new
                        {
                            Id = new Guid("f2c351c9-dc7e-a19e-948a-ccb88a18a224"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4402),
                            Name = "Fairytale ",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4403)
                        },
                        new
                        {
                            Id = new Guid("94191b24-733d-6afa-5a61-a3a8577acb61"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4404),
                            Name = "Self-Help ",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4404)
                        },
                        new
                        {
                            Id = new Guid("85114f80-eedf-9dce-9929-9acd0a87f243"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4406),
                            Name = "Science ",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 678, DateTimeKind.Utc).AddTicks(4406)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Quotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Quotations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fe05217-4bcc-b27a-d74a-7ffc3fa8bda4"),
                            BookId = new Guid("a7d8a869-2348-e9cc-9569-72288b051297"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(7598),
                            Description = "Qui molestias iusto reprehenderit fuga numquam delectus numquam ut voluptas.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(7605)
                        },
                        new
                        {
                            Id = new Guid("a8d817a4-88ed-85dc-d5f6-e48532c9c5e1"),
                            BookId = new Guid("2b451a34-fcb6-deb4-23fd-1fc4bf0dc838"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(7823),
                            Description = "Numquam iusto non culpa eius accusamus rerum quia molestias numquam in.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(7823)
                        },
                        new
                        {
                            Id = new Guid("f30b692f-34fb-2007-7977-1d7be62bd962"),
                            BookId = new Guid("53d46754-8af1-ce26-da9a-8310e2f14b9d"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(7870),
                            Description = "Odit sunt placeat maiores laboriosam temporibus nisi dolorem et velit praesentium quos consequatur velit et voluptatem atque nihil.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(7871)
                        },
                        new
                        {
                            Id = new Guid("2f5d4de3-c391-b1a4-1260-b6bfdc712040"),
                            BookId = new Guid("c318ca68-dd2e-7228-e632-fba8f5507d43"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(7944),
                            Description = "Quod aliquam expedita laboriosam laudantium est ut quis beatae quia aspernatur cum consequatur.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(7944)
                        },
                        new
                        {
                            Id = new Guid("f30b692f-34fb-2007-7977-1d7be62bd965"),
                            BookId = new Guid("90259ce9-87d2-ba78-fb6a-1cb6b6199220"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(8013),
                            Description = "Repudiandae nam voluptatem a quaerat fugit harum sequi porro porro minima officia et assumenda dolores eos.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(8014)
                        },
                        new
                        {
                            Id = new Guid("2f5d4de3-c391-b1a4-1260-b6bfdc712044"),
                            BookId = new Guid("12ee6bf5-2ed9-7811-5e51-e3951472d9d6"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(8071),
                            Description = "Adipisci nulla voluptatem voluptatem iure cum deserunt quidem ut maiores esse cumque illo placeat et nobis iusto molestiae quis.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(8072)
                        },
                        new
                        {
                            Id = new Guid("3cb7987a-567a-311c-e03b-d9c7b35552d1"),
                            BookId = new Guid("51925a4d-7c5b-563d-5dfa-01edc481b6e8"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(8135),
                            Description = "Dicta in ipsa ea nemo laborum ut in neque sit laborum autem.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(8135)
                        },
                        new
                        {
                            Id = new Guid("cd9eedb3-b38e-a511-0578-9f68937e663c"),
                            BookId = new Guid("c318ca68-dd2e-7228-e632-fba8f5507d43"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(8181),
                            Description = "Facere accusantium praesentium architecto ex ut veniam ullam autem impedit aut delectus recusandae modi.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(8181)
                        },
                        new
                        {
                            Id = new Guid("1a2853ad-cd61-6504-94d9-b7833c6ecf7c"),
                            BookId = new Guid("a7d8a869-2348-e9cc-9569-72288b051297"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(8226),
                            Description = "Repellat itaque sed esse et officiis nobis.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 681, DateTimeKind.Utc).AddTicks(8226)
                        });
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60f6c9e4-14cf-42b9-7708-1b7d0974ba26"),
                            BookId = new Guid("a7d8a869-2348-e9cc-9569-72288b051297"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(6488),
                            Description = "Aut voluptas minus dignissimos quia neque rerum consequatur ipsam quaerat amet rem ratione dolorum aut velit quia magni culpa dolorem error nobis accusamus et.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(6490)
                        },
                        new
                        {
                            Id = new Guid("be36e34d-fbb8-9b46-e9ad-b4a820e55016"),
                            BookId = new Guid("2b451a34-fcb6-deb4-23fd-1fc4bf0dc838"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(6765),
                            Description = "Vitae harum nemo hic quibusdam recusandae expedita et eius voluptatem assumenda aperiam fugit qui sed explicabo quas est ducimus voluptate sed rerum.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(6765)
                        },
                        new
                        {
                            Id = new Guid("1afc5be6-b111-fab7-0cc9-757d3154adb3"),
                            BookId = new Guid("2b451a34-fcb6-deb4-23fd-1fc4bf0dc838"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(6850),
                            Description = "Dolorum officiis voluptatem illo incidunt labore laborum aut et et et tempore error sint ut debitis nemo dolore ratione excepturi aut est quidem quisquam.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(6851)
                        },
                        new
                        {
                            Id = new Guid("e8d2a2da-cd9e-f299-202c-b6ed9e1f94d7"),
                            BookId = new Guid("53d46754-8af1-ce26-da9a-8310e2f14b9d"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(6957),
                            Description = "Aut quasi quibusdam officia adipisci sunt assumenda corporis quo et quasi fuga veritatis totam optio odit inventore nostrum inventore provident veritatis sint.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(6957)
                        },
                        new
                        {
                            Id = new Guid("edc531de-3491-3ee9-7992-4be730ead84e"),
                            BookId = new Guid("c318ca68-dd2e-7228-e632-fba8f5507d43"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(7035),
                            Description = "İllo rem id veritatis non sint rerum quam beatae ad voluptate.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(7036)
                        },
                        new
                        {
                            Id = new Guid("d4e14be6-da76-444a-9c51-4cad6ca4a466"),
                            BookId = new Guid("90259ce9-87d2-ba78-fb6a-1cb6b6199220"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(7074),
                            Description = "Ex facilis et consequatur vitae officiis quaerat quae id nesciunt numquam id suscipit ipsam placeat exercitationem officiis est et nihil autem necessitatibus beatae aut libero aspernatur repudiandae non aut beatae.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(7075)
                        },
                        new
                        {
                            Id = new Guid("0665cd7b-17f4-9387-e3ec-0a9f7ec0c15b"),
                            BookId = new Guid("90259ce9-87d2-ba78-fb6a-1cb6b6199220"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(7193),
                            Description = "Voluptatibus voluptatibus reprehenderit sit aperiam consequatur tempora fuga vel fuga et aut ratione.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(7193)
                        },
                        new
                        {
                            Id = new Guid("274772b7-a644-4c41-7d38-0569ac273e65"),
                            BookId = new Guid("12ee6bf5-2ed9-7811-5e51-e3951472d9d6"),
                            CreatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(7236),
                            Description = "Nam minus enim consequuntur iure assumenda aut quia et illum ipsum est exercitationem nesciunt enim molestias minima maxime est tempora qui a beatae dolores officia eligendi iusto reprehenderit omnis nostrum inventore quam in.",
                            UpdatedDate = new DateTime(2024, 10, 7, 9, 51, 22, 685, DateTimeKind.Utc).AddTicks(7237)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.AuthorImageFile", b =>
                {
                    b.HasBaseType("BookHubAPI.Domain.Entities.File");

                    b.HasDiscriminator().HasValue("AuthorImageFile");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.BookFile", b =>
                {
                    b.HasBaseType("BookHubAPI.Domain.Entities.File");

                    b.Property<int>("PublishmentCount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("BookFile");
                });

            modelBuilder.Entity("AuthorAuthorImageFile", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.AuthorImageFile", null)
                        .WithMany()
                        .HasForeignKey("AuthorImageFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookHubAPI.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Book", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookHubAPI.Domain.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Quotation", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Book", "Book")
                        .WithMany("Quotation")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Review", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookHubAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookHubAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Book", b =>
                {
                    b.Navigation("Quotation");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookHubAPI.Domain.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
